{"version":3,"sources":["shared/TitleBar.js","features/account/AccountCardDescription.js","features/account/AccountCard.js","features/transaction/transactionApi.js","features/account/accountApi.js","features/account/accountSlice.js","features/account/AccountList.js","features/account/index.js","features/account/AccountForm.js","features/account/EditAccount.js","features/account/CreateAccount.js","features/account/AccountDetails.js","features/transaction/transactionSlice.js","features/transaction/TransactionForm.js","features/transaction/Transaction.js","features/transaction/TransactionList.js","features/transaction/DateFilter.js","features/transaction/SearchContainer.js","features/transaction/index.js","features/account/AccountInfo.js","shared/AppBar.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["TitleBar","title","location","useLocation","history","useHistory","className","pathname","src","alt","onClick","push","AccountCardDescription","account","style","display","flexWrap","flexGrow","balance","type","dateUpdated","toDateString","dateCreated","id","AccountCard","useState","isOpen","setIsOpen","name","transactionList","accountId","description","amount","Date","addTransactionApi","data","newTransaction","now","toString","getTransactionsApi","filter","transaction","accountList","createAccountApi","newAccount","getAccountApi","find","element","updateAccountApi","originalAccountIndex","findIndex","originalAccount","updatedAccount","difference","handleTransaction","Math","abs","accountSlice","createSlice","initialState","accounts","loading","selectedAccount","reducers","setAccounts","state","action","payload","setLoading","setSelectedAccount","getAccounts","dispatch","a","responseData","getAccountInfo","actions","AccountList","actionDispatch","useDispatch","useSelector","useEffect","map","AccountPage","AccountForm","accountInfo","setAccountInfo","handleChange","event","target","value","onChange","disabled","createAccount","EditAccount","useParams","CreateAccount","AccountDetails","transactionSlice","transactions","filteredtransactions","setTransactions","setFilteredTransaction","getTransactions","getState","selectedAccountId","getFilteredDate","date","year","month","filterByYear","filterByYearAndMonth","tempList","forEach","transac","getFullYear","isSameYear","isSameMonth","getMonth","TransactionForm","closeForm","setTransac","transactionType","backgroundColor","Transaction","TransactionList","months","DateFilter","selectedDate","setSelectedDate","accountCreated","yearOptions","setYearOptions","handleDateChange","newDate","filteredData","todayYear","createdYear","tempYearOptions","Array","from","length","v","k","getYears","index","SearchContainer","searchText","setSearchText","placeholder","search","tempData","includes","Transactions","formOpen","setFormOpen","setType","AccountInfo","AppBar","createBrowserHistory","App","exact","path","component","Accounts","store","configureStore","reducer","accountReducer","transactionReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f598d1a8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\n\r\nconst TitleBar = ({ title }) => {\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n\r\n  const goHome = () => {\r\n    history.push('/')\r\n  }\r\n  return (\r\n    <div className='title-bar'>\r\n      {location.pathname !== '/account' && (\r\n        <img\r\n          src='/images/arrow-back.png'\r\n          alt='back icon'\r\n          className='back-button'\r\n          title='Back to Accounts'\r\n          onClick={goHome}\r\n        />\r\n      )}\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TitleBar\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst AccountCardDescription = ({ account }) => {\r\n  const history = useHistory()\r\n\r\n  const goToEdit = () => {\r\n    history.push(`/update-account/${account.id}`)\r\n  }\r\n  const goToAccountInfo = () => {\r\n    history.push(`/account/${account.id}`)\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n      <div style={{ flexGrow: 1 }}>\r\n        <h2>Balance: ${account.balance}</h2>\r\n        <p>Account Type: {account.type}</p>\r\n        <p>Last Updated: {account.dateUpdated.toDateString()}</p>\r\n        <p>Date Created: {account.dateCreated.toDateString()}</p>\r\n      </div>\r\n      <div className='account-action'>\r\n        <button onClick={goToEdit}>Edit Account</button>\r\n        <button onClick={goToAccountInfo}>View Account Information</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountCardDescription\r\n","import React, { useState } from 'react'\r\nimport AccountCardDescription from './AccountCardDescription'\r\nconst AccountCard = ({ account }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  return (\r\n    <div className='account-card'>\r\n      <div className='account-info' onClick={() => setIsOpen(!isOpen)}>\r\n        <div style={{ flexGrow: 1 }}>\r\n          <h1>{account.name}</h1>\r\n        </div>\r\n        <div className='account-action'>\r\n          {isOpen ? (\r\n            <img\r\n              src='/images/up-arrow.png'\r\n              alt='close icon'\r\n              className='account-card-icon'\r\n            />\r\n          ) : (\r\n            <img\r\n              src='/images/down-arrow.png'\r\n              alt='close icon'\r\n              className='account-card-icon'\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      {isOpen && (\r\n        <div className='account-description'>\r\n          <AccountCardDescription account={account} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountCard\r\n","var transactionList = [\r\n  {\r\n    id: '0',\r\n    accountId: '25466677',\r\n    description: 'Stock Trading',\r\n    amount: 20,\r\n    type: 'deposit',\r\n    dateCreated: new Date()\r\n  },\r\n  {\r\n    id: '1',\r\n    accountId: '25466677',\r\n    description: 'Pay Check',\r\n    amount: 20,\r\n    type: 'deposit',\r\n    dateCreated: new Date()\r\n  },\r\n  {\r\n    id: '2',\r\n    accountId: '25466677',\r\n    description: 'Venmo',\r\n    amount: 20,\r\n    type: 'withdraw',\r\n    dateCreated: new Date()\r\n  }\r\n]\r\n\r\nexport const addTransactionApi = data => {\r\n  //Date.now() returns number of miliseconds elapsed since January 1, 1970.\r\n  //using as id\r\n  let newTransaction = {\r\n    id: Date.now().toString(),\r\n    ...data,\r\n    dateCreated: new Date()\r\n  }\r\n  transactionList.push(newTransaction)\r\n  //\r\n  //\r\n  //\r\n  //\r\n  // TODO Update account Balance\r\n}\r\nexport const getTransactionsApi = id => {\r\n  let list = transactionList.filter(transaction => transaction.accountId == id)\r\n  return list\r\n}\r\n","import { addTransactionApi } from '../transaction/transactionApi'\r\nimport axios from \"../../../node_modules/axios\"\r\n//remove once json server setup\r\n/*var accountList = [];\r\nconst getData = () => { \r\n  axios.get(\"https://my-json-server.typicode.com/mj434/IS322-json/accounts\")\r\n  .then(response => {\r\n    accountList =  response.data;\r\n  }).catch(error => {\r\n    console.log(error.message);\r\n    accountList = [];  \r\n  })\r\n}*/  \r\nvar accountList = [\r\n  {\r\n    id: \"08786666\",\r\n    name: \"Test Reserve Account\",\r\n    type: \"reserve\",\r\n    balance: 1600,\r\n    dateCreated: new Date(1995, 11, 17),\r\n    dateUpdated: new Date(2020, 2, 12)\r\n  },\r\n  {\r\n    id: \"122666626\",\r\n    name: 'My Savings Account',\r\n    type: 'saving',\r\n    balance: 1400,\r\n    dateCreated: new Date(1995, 11, 17),\r\n    dateUpdated: new Date(2020, 2, 12)\r\n  },\r\n  {\r\n    id: \"25466677\",\r\n    name: \"My Checkings Account\",\r\n    type: \"checking\",\r\n    balance: 1200,\r\n    dateCreated: new Date(1995, 11, 17),\r\n    dateUpdated: new Date(2020, 2, 12)\r\n  }\r\n]\r\n\r\nexport const createAccountApi = data => {\r\n  //Date.now() returns number of miliseconds elapsed since January 1, 1970.\r\n  //using as id\r\n\r\n  let newAccount = {\r\n    id: Date.now().toString(),\r\n    ...data,\r\n    dateCreated: new Date(),\r\n    dateUpdated: new Date()\r\n  }\r\n  accountList =[...accountList, newAccount]\r\n}\r\nexport const getAccountsApi = () => {\r\n  //await getData()\r\n  return accountList\r\n}\r\nexport const getAccountApi = id => {\r\n  let account = accountList.find(element => element.id === id)\r\n  return account\r\n}\r\nexport const updateAccountApi = data => {\r\n  let originalAccountIndex = accountList.findIndex(\r\n    account => account.id === data.id\r\n  )\r\n  let originalAccount = accountList.find(account => account.id == data.id)\r\n  let updatedAccount = {\r\n    ...data,\r\n    dateUpdated: new Date()\r\n  }\r\n  //account balance changed\r\n  //record transaction\r\n  if (originalAccount.balance != data.balance) {\r\n    let difference = originalAccount.balance - data.balance\r\n    handleTransaction(difference, originalAccount.id)\r\n  }\r\n  accountList[originalAccountIndex] = updatedAccount\r\n}\r\nconst handleTransaction = (difference, accountId) => {\r\n  if (difference > 0) {\r\n    let transaction = {\r\n      accountId: accountId,\r\n      description: 'Balance changed',\r\n      //record absolute value of the difference\r\n      amount: Math.abs(difference),\r\n      type: 'withdraw'\r\n    }\r\n    addTransactionApi(transaction)\r\n  } else if (difference < 0) {\r\n    let transaction = {\r\n      accountId: accountId,\r\n      description: 'Balance changed',\r\n      amount: Math.abs(difference),\r\n      type: 'deposit'\r\n    }\r\n    addTransactionApi(transaction)\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport {\r\n  createAccountApi,\r\n  getAccountsApi,\r\n  updateAccountApi,\r\n  getAccountApi\r\n} from './accountApi'\r\nconst initialState = {\r\n  accounts: [],\r\n  loading: false,\r\n  selectedAccount: null\r\n}\r\n\r\nexport const accountSlice = createSlice({\r\n  name: 'account',\r\n  initialState,\r\n  reducers: {\r\n    setAccounts: (state, action) => {\r\n      state.accounts = action.payload\r\n    },\r\n    setLoading: state => {\r\n      state.loading = !state.loading\r\n    },\r\n    setSelectedAccount: (state, action) => {\r\n      state.selectedAccount = action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const getAccounts = () => async dispatch => {\r\n  dispatch(setLoading())\r\n  let responseData = await getAccountsApi()\r\n  dispatch(setAccounts(responseData))\r\n  dispatch(setLoading())\r\n}\r\nexport const getAccountInfo = id => async dispatch => {\r\n  dispatch(setLoading())\r\n  let responseData = getAccountApi(id)\r\n  dispatch(setSelectedAccount(responseData))\r\n  dispatch(setLoading())\r\n}\r\nexport const createAccount = data => async dispatch => {\r\n  dispatch(setLoading())\r\n  createAccountApi(data)\r\n  dispatch(getAccounts())\r\n  dispatch(setLoading())\r\n}\r\nexport const updateAccount = data => async dispatch => {\r\n  dispatch(setLoading())\r\n  updateAccountApi(data)\r\n  dispatch(setLoading())\r\n}\r\n\r\nexport const {\r\n  setLoading,\r\n  setAccounts,\r\n  setSelectedAccount\r\n} = accountSlice.actions\r\nexport default accountSlice.reducer\r\n","import React, { useEffect } from 'react'\r\nimport AccountCard from './AccountCard'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getAccounts } from './accountSlice'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst AccountList = () => {\r\n  const actionDispatch = useDispatch()\r\n  const history = useHistory()\r\n  const accounts = useSelector(state => state.account.accounts)\r\n\r\n  const goToCreate = () => {\r\n    history.push('/create-account')\r\n  }\r\n  useEffect(() => {\r\n    actionDispatch(getAccounts())\r\n  }, [])\r\n\r\n  return (\r\n    <div className='account-list'>\r\n      <button className='new-button' onClick={goToCreate}>\r\n        Create New Account\r\n      </button>\r\n      {accounts.map(account => (\r\n        <AccountCard account={account} key={account.id} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountList\r\n","import React from 'react'\r\nimport TitleBar from '../../shared/TitleBar'\r\nimport AccountList from './AccountList'\r\nconst AccountPage = () => {\r\n  return (\r\n    <div>\r\n      <TitleBar title='Accounts' />\r\n      <AccountList />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountPage\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateAccount, createAccount } from './accountSlice'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst AccountForm = ({ account }) => {\r\n  const [accountInfo, setAccountInfo] = useState(account)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const handleChange = event => {\r\n    setAccountInfo({ ...accountInfo, [event.target.name]: event.target.value })\r\n  }\r\n  const handleSubmit = () => {\r\n    //check edit account or create new account\r\n    //if account has id field defined, its a update request else create request\r\n    if (account.id) {\r\n      dispatch(updateAccount(accountInfo))        \r\n      history.push(`/account/${accountInfo.id}`)    \r\n    } else {\r\n      dispatch(createAccount(accountInfo))\r\n      history.push('/')\r\n    }\r\n  }\r\n  const HandleClear = () => {\r\n    //reset account value\r\n    setAccountInfo(account)\r\n  }\r\n  return (\r\n    <div className='account-form'>\r\n      <h2>Name:</h2>\r\n      <input\r\n        type='text'\r\n        value={accountInfo.name}\r\n        onChange={handleChange}\r\n        name='name'\r\n      />\r\n      <h2>Account Type:</h2>\r\n      <select value={accountInfo.type} onChange={handleChange} name='type'>\r\n        <option disabled>Select account type</option>\r\n        <option value='reserve'>Reserve</option>\r\n        <option value='saving'>Savings</option>\r\n        <option value='checking'>Checking</option>\r\n      </select>\r\n      <h2>Account Balance:</h2>\r\n      <input\r\n        type='number'\r\n        value={accountInfo.balance}\r\n        onChange={handleChange}\r\n        name='balance'\r\n      />\r\n      <div className='account-form-action'>\r\n        <button onClick={HandleClear}>Clear</button>\r\n        <button onClick={handleSubmit}>Submit</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountForm\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport TitleBar from '../../shared/TitleBar'\r\nimport AccountForm from './AccountForm'\r\nimport { getAccountInfo } from './accountSlice'\r\nconst EditAccount = () => {\r\n  let { accountId } = useParams()\r\n  const dispatch = useDispatch()\r\n  const selectedAccount = useSelector(state => state.account.selectedAccount)\r\n\r\n  useEffect(() => {\r\n    dispatch(getAccountInfo(accountId))\r\n  }, [accountId])\r\n\r\n  return (\r\n    <div>\r\n      <TitleBar title='Edit Account' />\r\n      {/* only visible if selected account is populated */}\r\n      {selectedAccount?.id && <AccountForm account={selectedAccount} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditAccount\r\n","import React from 'react'\r\nimport TitleBar from '../../shared/TitleBar'\r\nimport AccountForm from './AccountForm'\r\n\r\nconst newAccount = {\r\n  name: '',\r\n  type: 'checking',\r\n  balance: 0\r\n}\r\nconst CreateAccount = () => {\r\n  return (\r\n    <div>\r\n      <TitleBar title='Create Account' />\r\n      <AccountForm account={newAccount} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateAccount\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst AccountDetails = () => {\r\n  const account = useSelector(state => state.account.selectedAccount)\r\n  const history = useHistory()\r\n\r\n  const goToEdit = () => {\r\n    history.push(`/update-account/${account.id}`)\r\n  }\r\n\r\n  return (\r\n    <div className='account-details'>\r\n      <div>\r\n        <h2>Balance: ${account.balance}</h2>\r\n        <p>\r\n          <strong>Account Type:</strong> {account.type}\r\n        </p>\r\n        <p>\r\n          <strong>Last Updated:</strong> {account.dateUpdated.toDateString()}\r\n        </p>\r\n        <p>\r\n          <strong>Date Created:</strong> {account.dateCreated.toDateString()}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <button onClick={goToEdit}>Edit Account</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountDetails\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { getTransactionsApi, addTransactionApi } from './transactionApi'\r\n\r\nconst initialState = {\r\n  transactions: [],\r\n  loading: false,\r\n  filteredtransactions: []\r\n}\r\n\r\nexport const transactionSlice = createSlice({\r\n  name: 'transaction',\r\n  initialState,\r\n  reducers: {\r\n    setTransactions: (state, action) => {\r\n      state.transactions = action.payload\r\n      state.filteredtransactions = action.payload\r\n    },\r\n    setFilteredTransaction: (state, action) => {\r\n      state.filteredtransactions = action.payload\r\n    },\r\n    setLoading: state => {\r\n      state.loading = !state.loading\r\n    }\r\n  }\r\n})\r\n\r\nexport const getTransactions = () => async (dispatch, getState) => {\r\n  let selectedAccountId = getState().account.selectedAccount.id\r\n  dispatch(setLoading())\r\n  let responseData = getTransactionsApi(selectedAccountId)\r\n  dispatch(setTransactions(responseData))\r\n  dispatch(setLoading())\r\n}\r\nexport const addTransaction = data => async (dispatch, getState) => {\r\n  let selectedAccountId = getState().account.selectedAccount.id\r\n  dispatch(setLoading())\r\n  let newTransaction = {\r\n    ...data,\r\n    accountId: selectedAccountId\r\n  }\r\n  addTransactionApi(newTransaction)\r\n  dispatch(getTransactions())\r\n  dispatch(setLoading())\r\n}\r\nexport const filterByDate = date => async (dispatch, getState) => {\r\n  dispatch(setLoading())\r\n  let data = getState().transaction.transactions\r\n  let filteredData = getFilteredDate(date, data)\r\n  dispatch(setFilteredTransaction(filteredData))\r\n  dispatch(setLoading())\r\n}\r\nexport const filterBySearchText = search => async (dispatch, getState) => {\r\n  dispatch(setLoading())\r\n  let data = getState().transaction.transactions\r\n  let tempData = []\r\n  data.forEach(transac => {\r\n    if (transac.description.includes(search)) {\r\n      tempData.push(transac)\r\n    }\r\n  })\r\n  dispatch(setFilteredTransaction(tempData))\r\n  dispatch(setLoading())\r\n}\r\n//helper function to get filteredDate\r\nconst getFilteredDate = (date, data) => {\r\n  if (date.year == -1) {\r\n    return data\r\n  } else if (date.year != -1 && date.month == -1) {\r\n    return filterByYear(date, data)\r\n  } else if (date.year != -1 && date.month != -1) {\r\n    return filterByYearAndMonth(date, data)\r\n  }\r\n}\r\nconst filterByYear = (date, data) => {\r\n  let tempList = []\r\n  data.forEach(transac => {\r\n    let isSameYear = date.year == new Date(transac.dateCreated).getFullYear()\r\n    if (isSameYear) {\r\n      tempList.push(transac)\r\n    }\r\n  })\r\n  return tempList\r\n}\r\nconst filterByYearAndMonth = (date, data) => {\r\n  let tempList = []\r\n  data.forEach(transac => {\r\n    let isSameYear = date.year == new Date(transac.dateCreated).getFullYear()\r\n    let isSameMonth = date.month == new Date(transac.dateCreated).getMonth()\r\n    if (isSameYear && isSameMonth) {\r\n      tempList.push(transac)\r\n    }\r\n  })\r\n  return tempList\r\n}\r\n\r\nexport const {\r\n  setLoading,\r\n  setTransactions,\r\n  setFilteredTransaction\r\n} = transactionSlice.actions\r\nexport default transactionSlice.reducer\r\n","import React, { useState } from 'react'\r\nimport { addTransaction } from './transactionSlice'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst newTransaction = {\r\n  description: '',\r\n  amount: 0\r\n}\r\n\r\nconst TransactionForm = ({ type, closeForm }) => {\r\n  const [transac, setTransac] = useState(newTransaction)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleSubmit = () => {\r\n    let transactionType = type ? 'deposit' : 'withdraw'\r\n    dispatch(addTransaction({ ...transac, type: transactionType }))\r\n  }\r\n  const handleClear = () => {\r\n    setTransac(newTransaction)\r\n  }\r\n  const handleChange = event => {\r\n    setTransac({ ...transac, [event.target.name]: event.target.value })\r\n  }\r\n  const handleClose = () => {\r\n    closeForm()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Amount:</h2>\r\n      <input\r\n        type='number'\r\n        value={transac.amount}\r\n        onChange={handleChange}\r\n        name='amount'\r\n      />\r\n      <h2>Description</h2>\r\n      <input\r\n        type='text'\r\n        value={transac.description}\r\n        onChange={handleChange}\r\n        name='description'\r\n      />\r\n      <div className='transaction-form-action'>\r\n        <button onClick={handleClear}>Clear</button>\r\n        <button onClick={handleClose}>Close</button>\r\n        <button\r\n          onClick={handleSubmit}\r\n          style={{ backgroundColor: type ? 'green' : 'red' }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TransactionForm\r\n","import React from 'react'\r\n\r\nconst Transaction = ({ transaction }) => {\r\n  const getColoredAmount = () => {\r\n    if (transaction.type === 'withdraw') {\r\n      return (\r\n        <p className='transaction-amount withdraw'>${transaction.amount}</p>\r\n      )\r\n    } else {\r\n      return <p className='transaction-amount deposit'>${transaction.amount}</p>\r\n    }\r\n  }\r\n  return (\r\n    <div className='transaction-card'>\r\n      <div>\r\n        <p className='transaction-description'>{transaction.description}</p>\r\n        <p className='transaction-date'>{transaction.dateCreated.toDateString()}</p>\r\n      </div>\r\n      {getColoredAmount()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Transaction\r\n","import React, { useEffect } from 'react'\r\nimport Transaction from './Transaction'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getTransactions } from './transactionSlice'\r\n\r\nconst TransactionList = () => {\r\n  const dispatch = useDispatch()\r\n  const filteredtransactions = useSelector(\r\n    state => state.transaction.filteredtransactions\r\n  )\r\n  const selectedAccountId = useSelector(\r\n    state => state.account.selectedAccount.id\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(getTransactions())\r\n  }, [selectedAccountId])\r\n\r\n  return (\r\n    <>\r\n      {filteredtransactions.map(transaction => (\r\n        <Transaction transaction={transaction} key={transaction.id} />\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionList\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { filterByDate } from './transactionSlice'\r\nconst months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n]\r\n\r\nconst DateFilter = () => {\r\n  const dispatch = useDispatch()\r\n  const [selectedDate, setSelectedDate] = useState({\r\n    year: -1,\r\n    month: -1\r\n  })\r\n\r\n  const accountCreated = useSelector(\r\n    state => state.account.selectedAccount.dateCreated\r\n  )\r\n  const [yearOptions, setYearOptions] = useState([])\r\n\r\n  const handleDateChange = event => {\r\n    let newDate = {\r\n      ...selectedDate,\r\n      [event.target.name]: event.target.value\r\n    }\r\n    setSelectedDate(newDate)\r\n    dispatch(filterByDate(newDate))\r\n  }\r\n\r\n  const getYears = () => {\r\n    let todayYear = new Date().getFullYear()\r\n    let createdYear = new Date(accountCreated).getFullYear()\r\n    //ES6 arrow function to create list of year from account created year to today\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#sequence_generator_range\r\n    let tempYearOptions = Array.from(\r\n      { length: todayYear + 1 - createdYear },\r\n      (v, k) => createdYear + k\r\n    )\r\n    setYearOptions([...tempYearOptions])\r\n  }\r\n\r\n  useEffect(() => {\r\n    getYears()\r\n  }, [accountCreated])\r\n  return (\r\n    <div className='filter-container'>\r\n      <div className='filter-content'>\r\n        <p>Filter By Month :</p>\r\n        <select\r\n          value={selectedDate.month}\r\n          onChange={handleDateChange}\r\n          name='month'\r\n          disabled={selectedDate.year == -1}\r\n        >\r\n          <option value={-1}>Any</option>\r\n          {months.map((month, index) => (\r\n            <option value={index} key={month}>{month}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className='filter-content'>\r\n        <p>Filter By Year :</p>\r\n        <select\r\n          value={selectedDate.year}\r\n          onChange={handleDateChange}\r\n          name='year'\r\n        >\r\n          <option value={-1}>Any</option>\r\n          {yearOptions.map(year => (\r\n            <option value={year} key={year}>{year}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DateFilter\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { filterBySearchText } from './transactionSlice'\r\n\r\nconst SearchContainer = () => {\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const handleChange = event => {\r\n    setSearchText(event.target.value)\r\n    dispatch(filterBySearchText(event.target.value))\r\n  }\r\n\r\n  return (\r\n    <input\r\n      className='search-box'\r\n      placeholder='search transaction'\r\n      value={searchText}\r\n      onChange={handleChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SearchContainer\r\n","import React, { useState } from 'react'\r\nimport TransactionForm from './TransactionForm'\r\nimport TransactionList from './TransactionList'\r\nimport DateFilter from './DateFilter'\r\nimport SearchContainer from './SearchContainer'\r\n\r\nconst Transactions = () => {\r\n  const [formOpen, setFormOpen] = useState(false)\r\n  const [type, setType] = useState(true)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const openDepositForm = () => {\r\n    setFormOpen(true)\r\n    setType(true)\r\n  }\r\n  const openWithdrawForm = () => {\r\n    setFormOpen(true)\r\n    setType(false)\r\n  }\r\n  const closeForm = () => {\r\n    setFormOpen(false)\r\n    setType(true)\r\n  }\r\n  const HandleSearchTextChange = event => {\r\n    setSearchText(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='account-card'>\r\n        <div className='account-info'>\r\n          <div style={{ flexGrow: 1 }}>\r\n            <h1>Transactions</h1>\r\n          </div>\r\n          <SearchContainer />\r\n        </div>\r\n        <div className='account-description'>\r\n          <div className='transaction-actions'>\r\n            <div>\r\n              <div style={{ display: 'flex' }}>\r\n                <button onClick={openWithdrawForm}>Withdraw</button>\r\n                <button onClick={openDepositForm} className='deposit-button'>\r\n                  Deposit\r\n                </button>\r\n              </div>\r\n              {formOpen && (\r\n                <TransactionForm type={type} closeForm={closeForm} />\r\n              )}\r\n            </div>\r\n          </div>\r\n          <DateFilter />\r\n          <TransactionList />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Transactions\r\n","import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getAccountInfo } from './accountSlice'\r\nimport TitleBar from '../../shared/TitleBar'\r\nimport AccountDetails from './AccountDetails'\r\nimport Transactions from '../transaction'\r\n\r\nconst AccountInfo = () => {\r\n  let { accountId } = useParams()\r\n  const dispatch = useDispatch()\r\n  const selectedAccount = useSelector(state => state.account.selectedAccount)\r\n\r\n  useEffect(() => {\r\n    dispatch(getAccountInfo(accountId))\r\n  }, [accountId])\r\n\r\n  return (\r\n    <div>\r\n      {selectedAccount?.id && (        \r\n      // if selectedAccount is set\r\n        <>\r\n          <TitleBar title={selectedAccount.name} />\r\n          <AccountDetails />\r\n          <Transactions />\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountInfo\r\n","import React from 'react'\r\nconst AppBar = () => {\r\n  return (\r\n    <div className='app-bar'>\r\n      <img\r\n        src='/images/logo.PNG'\r\n        alt='njit bank logo'\r\n        className='app-bar_logo'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppBar\r\n","import React from 'react'\nimport { Route, Switch, Router } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport Accounts from './features/account'\nimport EditAccount from './features/account/EditAccount'\nimport CreateAccount from './features/account/CreateAccount'\nimport AccountInfo from './features/account/AccountInfo'\nimport AppBar from './shared/AppBar'\nimport './App.css'\n\nconst history = createBrowserHistory()\n\nfunction App () {\n  return (\n    <div className='App'>\n      <div className='container'>\n        <AppBar />\n        <Router history={history}>\n          <Switch>\n            <Route exact path='/' component={Accounts} />\n            <Route exact path='/account' component={Accounts} />\n            <Route\n              exact\n              path='/update-account/:accountId'\n              component={EditAccount}\n            />\n            <Route exact path='/create-account' component={CreateAccount} />\n            <Route exact path='/account/:accountId' component={AccountInfo} />\n            <Route component={Accounts} />\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit';\nimport accountReducer from '../features/account/accountSlice';\nimport transactionReducer from '../features/transaction/transactionSlice';\n\nexport const store = configureStore({\n  reducer: {\n    account: accountReducer,\n    transaction: transactionReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}